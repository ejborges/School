/*
Emilio Borges - Mar. 10, 2015
EECS 2510 - Non-Linear Data Structures
Project 1 - Huffman Encoding System (HES)
*/


#ifndef Huffman_H	// start of include guard
#define Huffman_H

#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <math.h>

class Huffman
{
	public:
		Huffman(); // Constructor

		// These functions are best described where they're defined in Huffman.cpp
		void InitializeFromFile(std::string FileName);
		void EncodeFile(std::string InFile, std::string OutFile);
		void DecodeFile(std::string InFile, std::string OutFile);

	private:
		bool init = false;					// true if InitializeFromFile() has been successfully executed
		bool enc = false;					// true if EncodeFile() has been successfully executed
		bool dec = false;					// true if DecodeFile() has been successfully executed

		struct node							// Internal nodes of Huffman tree
		{
			char character = NULL;
			int count = 0;
			int height = 1;					// Height of the subtree this node represents.
											// Used to better sort all the same-count nodes 
											// in the sorted frequency table.
			node *left_ptr = NULL;
			node *right_ptr = NULL;
		};
		
		node *frequencyTable[256];			// Table to hold the count of the amount of times each 
											// character appears in the file and is also used to 
											// build the Huffman tree.
											// Array of pointers to charNodes.
											// 256 for the 256 ASCII characters, the array index 
											// represents a particular ASCII char and that index's 
											// value is the # of times that char appears in the file.

		node *tree = NULL;					// Tree will hold the completed Huffman tree

		std::string encodingStrings[256];	// This will hold each ASCII char's encoding string generated by generateEncodingStrings().
											// 256 for the 256 ASCII characters, the array index 
											// represents a particular ASCII char and that index's 
											// value holds that char's encoding string

		// --- Helper Functions --- //

		void sortFrequencyTable();			// Sorts the frequency table... What else did you expect.
											// Better description with function definition

		
		std::string generateEncodingStrings(node *currentNode, std::string encodingString);		// Recursively traverses the Huffman tree and generates 
																								// the appropriate encoding string for each of the 256 
																								// ASCII characters.

		int byte_string_to_decimal(std::string byte_string);		// Takes in an 8 character string of '1's and '0's representing a byte value 
																	// and returns its decimal value equivalent. Return range is from 0 to 255

		std::string generatePaddingBitString(int length, node *currentNode, std::string paddingString);	// Recursively traverses the tree to find valid 
																										// padding bits that will not make it to a leaf node.

		std::string decimal_to_byte_string(int decimal);			// Takes in a decimal integer between 0 and 255 and generates the appropriate
																	// 8-bit bit-string that represents that value in binary. Returns a string
																	// ranging from "00000000" to "11111111".
};

#endif	// end of include guard
// No other code should go after this line