/*
	Author: Emilio Borges
	Last Modified: 20 January 2016
	Project: Collatz Sequence
	Class: EECS 3540 Operating Systems
	Project Desctiption: In this project you will compute the Collatz sequence for a 
						 range of integers and determine the range of stopping times.

	My Description: Search the interwebs for "collatz conjecture". Input an integer range.
					Cout the number of steps it took to get number N to equal 1. Output
					a frequency table showing how many times each step number occurred.

	Requires: C++11 compiler to use lambda function in sort()
*/

#include <iostream>		// cin, cout
#include <iomanip>		// setw();
#include <string>
#include <vector>
#include <algorithm>	// sort(); to sort intVectorFrequencyTable

using namespace std;

int intStartVal;
int intEndVal;
int intRange;
int intStoppingTime;
long long intWorkingVal;
string stringInput;
vector< vector<int> > intVectorFrequencyTable;	// < <stopping time, frequency>
												//   <stopping time, frequency>
												//   <stopping time, frequency> >

vector<int> intVectorFrequencyTableRow;			// <stopping time, frequency>

void drawtitle(){
	// generated by http://patorjk.com/software/taag 
	// font: Big, default settings
	cout << "\n\t  _____      _ _       _       " << endl;
	cout << "\t / ____|    | | |     | |      " << endl;
	cout << "\t| |     ___ | | | __ _| |_ ____" << endl;
	cout << "\t| |    / _ \\| | |/ _` | __|_  /" << endl;
	cout << "\t| |___| (_) | | | (_| | |_ / / " << endl;
	cout << "\t \\_____\\___/|_|_|\\__,_|\\__/___|   by Emilio Borges\n" << endl;
}

void drawtable() {
	cout << "\n\tStopping Times | Frequency\n";
	for (vector< vector<int> >::iterator tableRow = intVectorFrequencyTable.begin();
		tableRow != intVectorFrequencyTable.end(); tableRow++) 
	{
		cout << "\t" << setw(14) << tableRow->at(0) << setw(12) << tableRow->at(1) << endl;
	}
}

// pushes <stopping time, 1> to table
void pushNewRowToFrequencyTable(int stoppingTime){
	intVectorFrequencyTableRow.clear();
	intVectorFrequencyTableRow.push_back(stoppingTime);
	intVectorFrequencyTableRow.push_back(1);			// frequency; new row thus freq = 1
	intVectorFrequencyTable.push_back(intVectorFrequencyTableRow);
}

// attempts to find the row in frequency table that contains <stoppingTime>
// if found, increment its frequency and return true, else return false
bool findAndIncrement(int stoppingTime){
	if(intVectorFrequencyTable.empty()) return false;
	for (vector< vector<int> >::iterator tableRow = intVectorFrequencyTable.begin();
		tableRow != intVectorFrequencyTable.end(); tableRow++) 
	{
		if(tableRow->at(0) == stoppingTime){
			tableRow->at(1)++;
			return true;
		}
	}
	return false;
}

int main(){

	drawtitle();

	cout << "\tEnter positive non-zero starting value: ";
	cin >> stringInput;
	intStartVal = atoi(stringInput.c_str());
	cout << "\tEnter ending value: ";
	cin >> stringInput;
	intEndVal = atoi(stringInput.c_str());

	intRange = intEndVal - intStartVal + 1;

	cout << "\n\tStarting value = " << intStartVal 
		 << "\n\tEnding value = " << intEndVal 
		 << "\n\tRange = " << intRange << endl;

	if(intStartVal < 1){
		cout << "\n\tStarting value must be greater than zero!\n";
		return 0;
	}
	if(intStartVal > intEndVal){
		cout << "\n\tInvalid range! Ending value must be greater than or equal to starting value.\n";
		return 0;
	}

	if(intRange >= 50000000) 
		cout << "\n\tThis will take a long time. Go do something else for a while...\n";
	else if(intRange >=10000000)
		cout << "\n\tThis may take a few minutes...\n";
	else if(intRange >=1000000) 
		cout << "\n\tThis will only take a moment...\n";

	// calculate Collatz stopping time for each number in range [start to end] inclusive
	// if stopping time already exists, increment its frequency
	for(int n = intStartVal; n <= intEndVal; n++){

		intWorkingVal = n;
		intStoppingTime = 0;

		// calculate Collatz stopping time for n
		while(intWorkingVal != 1){

			// if EVEN
			if(!(intWorkingVal % 2)) intWorkingVal = intWorkingVal / 2;

			// if ODD
			else intWorkingVal = ((3 * intWorkingVal) + 1);

			intStoppingTime++;
		}

		// save n's stopping time/increment stopping time's frequency
		if(!findAndIncrement(intStoppingTime)){
			pushNewRowToFrequencyTable(intStoppingTime);
		}
	}

	// sort frequency table by <stopping times> in ascending order
	// http://stackoverflow.com/a/14669733
	//		for decending sort, change < for > in between a[0] < b[0]
	//		for frequency sort, change [0]s for [1]s
	sort(intVectorFrequencyTable.begin(), intVectorFrequencyTable.end(), 
		[](const vector<int>& a, const vector<int>& b){ return a[0] < b[0]; } );

	drawtable();

	// deallocate vector memory
	// http://stackoverflow.com/a/10465032
	//		`vector<tempObject>().swap(tempVector);`
	//		That will create an empty vector with no memory allocated and swap it 
	//		with tempVector, effectively deallocating the memory. The objects that 
	//		were in tempVector are transfered to the empty vector. Then, the empty 
	//		vector, since it is a nameless temporary object, is destroyed, and its 
	//		contents, which were previously owned by tempVector, are destroyed and 
	//		the memory deallocated.
	vector< vector<int> >().swap(intVectorFrequencyTable);
	vector<int>().swap(intVectorFrequencyTableRow);

	cout << endl;
	return 0;
}